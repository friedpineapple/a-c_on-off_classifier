# -*- coding: utf-8 -*-
"""randomclusters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XYuBJkGMtSEXlsP5Sl0kZI7AdyNBFNgY
"""

#tools import

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import pyplot
import datetime as datetime
import math
import numpy as np
import seaborn as sns
from numpy import NaN

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
import math
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn import metrics

#data entry

from google.colab import files
uploaded = files.upload()

#preprocessing

import io
df_hum_in = pd.read_csv(io.BytesIO(uploaded['humidity_in.csv']))
df_hum_out = pd.read_csv(io.BytesIO(uploaded['humidity_out.csv']))
df_temp_in = pd.read_csv(io.BytesIO(uploaded['temperature_in.csv']))
df_temp_out = pd.read_csv(io.BytesIO(uploaded['temperature_out.csv']))
df_power = pd.read_csv(io.BytesIO(uploaded['ac_power.csv']))
df_current = pd.read_csv(io.BytesIO(uploaded['ac_current.csv']))
df_occup = pd.read_csv(io.BytesIO(uploaded['occupancy.csv']))

df_hum_in['statetime'] = pd.to_datetime(df_hum_in['statetime'])
df_hum_out['statetime'] = pd.to_datetime(df_hum_out['statetime'])
df_temp_in['statetime'] = pd.to_datetime(df_temp_in['statetime'])
df_temp_out['statetime'] = pd.to_datetime(df_temp_out['statetime'])
df_power['statetime'] = pd.to_datetime(df_power['statetime'])
df_current['statetime'] = pd.to_datetime(df_current['statetime'])

df_hum_in['humidity_in'] = pd.to_numeric(df_hum_in['humidity_in'], errors='coerce')
df_hum_out['humidity_out'] = pd.to_numeric(df_hum_out['humidity_out'], errors='coerce')
df_temp_out['temp_out'] = pd.to_numeric(df_temp_out['temp_out'], errors='coerce')
df_power['ac_pow_power'] = pd.to_numeric(df_power['ac_pow_power'], errors='coerce')
df_current['ac_pow_current'] = pd.to_numeric(df_current['ac_pow_current'], errors='coerce')

df_hum_in = df_hum_in.set_index('statetime')  
df_hum_out = df_hum_out.set_index('statetime')
df_temp_in = df_temp_in.set_index('statetime')
df_temp_out = df_temp_out.set_index('statetime')
df_power = df_power.set_index('statetime')
df_current = df_current.set_index('statetime')

df_hum_out = df_hum_out.resample('min').mean()
df_hum_in = df_hum_in.resample('min').mean()
df_temp_in = df_temp_in.resample('min').mean()
df_temp_out = df_temp_out.resample('min').mean()
df_power = df_power.resample('min').max()
df_current = df_current.resample('min').max() #mean to max or mean to sum 

df_hum_out = df_hum_out.sort_values(by=['statetime'])
df_hum_in = df_hum_in.sort_values(by=['statetime'])
df_temp_in = df_temp_in.sort_values(by=['statetime'])
df_temp_out = df_temp_out.sort_values(by=['statetime'])
df_power = df_power.sort_values(by=['statetime'])
df_current = df_current.sort_values(by=['statetime'])

df_hum_out['humidity_out'].interpolate(method='linear', inplace=True)
df_hum_in['humidity_in'].interpolate(method='linear', inplace=True)
df_temp_in['temp_in'].interpolate(method='linear', inplace=True)
df_temp_out['temp_out'].interpolate(method='linear', inplace=True)
df_power['ac_pow_power'] = df_power['ac_pow_power'].fillna(0)
df_current['ac_pow_current'] = df_current['ac_pow_current'].fillna(0)

dflist = [df_hum_out, df_hum_in, df_temp_in, df_temp_out, df_power, df_current, df_occup]
df_outer = df_hum_out
for i in range(1, 6):
  df_outer = df_outer.merge(dflist[i], on='statetime', how='outer', sort=True)

plt.plot(df_outer['temp_in'])
plt.plot(df_outer['temp_out'])

df1 = df_hum_out.merge(df_temp_out, on='statetime', how='inner', sort=True)

plt.plot(df1)

df_outer[1:2]

from sklearn.cluster import KMeans
X = df1
kmeans = KMeans(n_clusters=2, random_state=0).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

a = kmeans.transform(X)
plt.plot (a)
kmeans.score
kmeans.cluster_centers_

plt.scatter(x= df1['humidity_out'], y= df1['temp_out'])
plt.scatter(x=c[:, 0],y= c[:, 1])

kmeans.score

df2 = df_power.merge(df_temp_in, on='statetime', how='inner', sort=True)

from sklearn.cluster import KMeans
X = df2
kmeans = KMeans(n_clusters=2, random_state=0).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

plt.scatter(x= df_outer.index, y= df_outer['ac_pow_power'])

plt.scatter(x= df2['ac_pow_power'], y= df2['temp_in'])
plt.scatter(x=c[:, 0],y= c[:, 1])

df3 = df_power.merge(df_current, on='statetime', how='inner', sort=True)

from sklearn.cluster import KMeans
X = df3
kmeans = KMeans(n_clusters=3, random_state=0).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

plt.scatter(x= df3['ac_pow_power'], y= df3['ac_pow_current'])
plt.scatter(x=c[:, 0],y= c[:, 1])

df4 = df_temp_in.merge(df_temp_out, on='statetime', how='inner', sort=True)

from sklearn.cluster import KMeans
X = df4
kmeans = KMeans(n_clusters=9, random_state=1000).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

plt.scatter(x= df4['temp_in'], y= df4['temp_out'])
plt.scatter(x=c[:, 0],y= c[:, 1])

df5 = df_power.merge(df_temp_out, on='statetime', how='inner', sort=True)

from sklearn.cluster import KMeans
X = df5
kmeans = KMeans(n_clusters=2, random_state=100).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

plt.scatter(x= df5['ac_pow_power'], y= df5['temp_out'])
plt.scatter(x=c[:, 0],y= c[:, 1])

df6 = df_hum_in.merge(df_power, on='statetime', how='inner', sort=True)

from sklearn.cluster import KMeans
X = df6
kmeans = KMeans(n_clusters=2, random_state=1000).fit(X)
#kmeans.labels_
kmeans.predict(X)
#plt.plot (X)
c = kmeans.cluster_centers_
plt.plot (c)

plt.scatter(x= df6['ac_pow_power'], y= df6['humidity_in'])
plt.scatter(x=c[:, 0],y= c[:, 1])

df6